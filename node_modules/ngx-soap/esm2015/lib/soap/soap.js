/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>
 * MIT Licensed
 */
import * as tslib_1 from "tslib";
import * as wsdl from './wsdl';
import { security } from './security';
import { Client } from './client';
export { Client } from './client';
export { security } from './security';
export const /** @type {?} */ WSDL = wsdl.WSDL;
/**
 * @return {?}
 */
function createCache() {
    const /** @type {?} */ cache = {};
    return function (key, load, callback) {
        if (!cache[key]) {
            load(function (err, result) {
                if (err) {
                    return callback(err);
                }
                cache[key] = result;
                callback(null, result);
            });
        }
        else {
            // process.nextTick(function () {
            //   callback(null, cache[key]);
            // });
            Promise.resolve(true).then(() => callback(null, cache[key]));
        }
    };
}
const /** @type {?} */ getFromCache = createCache();
/**
 * @param {?} url
 * @param {?} options
 * @return {?}
 */
function _requestWSDL(url, options) {
    // if (typeof options === 'function') {
    //   callback = options;
    //   options = {};
    // }
    return wsdl.open_wsdl(url, options);
    // const openWsdl = wsdl.open_wsdl.bind(null, url, options);
    // if (options.disableCache === true) {
    //   openWsdl(callback);
    // } else {
    //   getFromCache(url, openWsdl, callback);
    // }
}
/**
 * @param {?} url
 * @param {?} options
 * @param {?} endpoint
 * @return {?}
 */
export function createClient(url, options, endpoint) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // if (typeof options === 'function') {
        //   endpoint = callback;
        //   callback = options;
        //   options = {};
        // }
        if (typeof options === 'undefined') {
            options = {};
        }
        console.log("createClient", options);
        endpoint = options.endpoint || endpoint;
        // _requestWSDL(url, options, function(err, wsdl) {
        //   callback(err, wsdl && new Client(wsdl, endpoint, options));
        // });
        const /** @type {?} */ wsdl = yield _requestWSDL(url, options);
        const /** @type {?} */ client = new Client(wsdl, endpoint, options);
        return client;
    });
}
// export function createClientAsync(url, options, endpoint): Observable<any> {
//   if (typeof options === 'undefined') {
//     options = {};
//   }
//   console.log("createClientAsync", options)
//   return createClient(url, options, endpoint);
// }
// export function listen(server, pathOrOptions, services, xml) {
//   let options: any = {},
//     path = pathOrOptions,
//     uri = '';
//   if (typeof pathOrOptions === 'object') {
//     options = pathOrOptions;
//     path = options.path;
//     services = options.services;
//     xml = options.xml;
//     uri = options.uri;
//   }
//   const wsdl = new WSDL(xml || services, uri, options);
//   return new Server(server, path, services, wsdl, options);
// }
export const /** @type {?} */ BasicAuthSecurity = security.BasicAuthSecurity;
export const /** @type {?} */ NTLMSecurity = security.NTLMSecurity;
export const /** @type {?} */ WSSecurity = security.WSSecurity;
export const /** @type {?} */ WSSecurityCert = security.WSSecurityCert;
export const /** @type {?} */ ClientSSLSecurity = security.ClientSSLSecurity;
export const /** @type {?} */ ClientSSLSecurityPFX = security.ClientSSLSecurityPFX;
export const /** @type {?} */ BearerSecurity = security.BearerSecurity;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29hcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zb2FwLyIsInNvdXJjZXMiOlsibGliL3NvYXAvc29hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxPQUFPLEtBQUssSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMvQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyx1QkFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzs7OztBQUc5QjtJQUNFLHVCQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsTUFBTSxDQUFDLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRO1FBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsTUFBTTtnQkFDeEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDUixNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN0QjtnQkFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO2dCQUNwQixRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCLENBQUMsQ0FBQztTQUNKO1FBQUMsSUFBSSxDQUFDLENBQUM7Ozs7WUFJTixPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7S0FDRixDQUFDO0NBQ0g7QUFDRCx1QkFBTSxZQUFZLEdBQUcsV0FBVyxFQUFFLENBQUM7Ozs7OztBQUVuQyxzQkFBc0IsR0FBRyxFQUFFLE9BQU87Ozs7O0lBTWhDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQzs7Ozs7OztDQVFyQzs7Ozs7OztBQUVELE1BQU0sdUJBQTZCLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUTs7Ozs7OztRQU12RCxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FDZDtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3BDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQzs7OztRQUt4Qyx1QkFBTSxJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLHVCQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUM7O0NBQ2Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkQsTUFBTSxDQUFDLHVCQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQztBQUM1RCxNQUFNLENBQUMsdUJBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7QUFDbEQsTUFBTSxDQUFDLHVCQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyx1QkFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQztBQUN0RCxNQUFNLENBQUMsdUJBQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDO0FBQzVELE1BQU0sQ0FBQyx1QkFBTSxvQkFBb0IsR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUM7QUFDbEUsTUFBTSxDQUFDLHVCQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxMSBWaW5heSBQdWxpbSA8dmluYXlAbWlsZXdpc2UuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuaW1wb3J0ICogYXMgd3NkbCBmcm9tICcuL3dzZGwnO1xuaW1wb3J0IHsgc2VjdXJpdHkgfSBmcm9tICcuL3NlY3VyaXR5JztcbmltcG9ydCB7IENsaWVudCB9IGZyb20gJy4vY2xpZW50JztcbmV4cG9ydCB7IENsaWVudCB9IGZyb20gJy4vY2xpZW50JztcbmV4cG9ydCB7IHNlY3VyaXR5IH0gZnJvbSAnLi9zZWN1cml0eSc7XG5leHBvcnQgY29uc3QgV1NETCA9IHdzZGwuV1NETDtcbi8vIGV4cG9ydCBjb25zdCBwYXNzd29yZERpZ2VzdCA9IHV0aWxzLnBhc3N3b3JkRGlnZXN0O1xuXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcbiAgY29uc3QgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIGxvYWQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWNoZVtrZXldKSB7XG4gICAgICBsb2FkKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgY2FjaGVba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vICAgY2FsbGJhY2sobnVsbCwgY2FjaGVba2V5XSk7XG4gICAgICAvLyB9KTtcbiAgICAgIFByb21pc2UucmVzb2x2ZSh0cnVlKS50aGVuKCgpID0+IGNhbGxiYWNrKG51bGwsIGNhY2hlW2tleV0pKTtcbiAgICB9XG4gIH07XG59XG5jb25zdCBnZXRGcm9tQ2FjaGUgPSBjcmVhdGVDYWNoZSgpO1xuXG5mdW5jdGlvbiBfcmVxdWVzdFdTREwodXJsLCBvcHRpb25zKSB7XG4gIC8vIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgLy8gICBvcHRpb25zID0ge307XG4gIC8vIH1cblxuICByZXR1cm4gd3NkbC5vcGVuX3dzZGwodXJsLCBvcHRpb25zKTtcblxuICAvLyBjb25zdCBvcGVuV3NkbCA9IHdzZGwub3Blbl93c2RsLmJpbmQobnVsbCwgdXJsLCBvcHRpb25zKTtcbiAgLy8gaWYgKG9wdGlvbnMuZGlzYWJsZUNhY2hlID09PSB0cnVlKSB7XG4gIC8vICAgb3BlbldzZGwoY2FsbGJhY2spO1xuICAvLyB9IGVsc2Uge1xuICAvLyAgIGdldEZyb21DYWNoZSh1cmwsIG9wZW5Xc2RsLCBjYWxsYmFjayk7XG4gIC8vIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNsaWVudCh1cmwsIG9wdGlvbnMsIGVuZHBvaW50KTogUHJvbWlzZTxhbnk+IHtcbiAgLy8gaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vICAgZW5kcG9pbnQgPSBjYWxsYmFjaztcbiAgLy8gICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gIC8vICAgb3B0aW9ucyA9IHt9O1xuICAvLyB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgY29uc29sZS5sb2coXCJjcmVhdGVDbGllbnRcIiwgb3B0aW9ucylcbiAgZW5kcG9pbnQgPSBvcHRpb25zLmVuZHBvaW50IHx8IGVuZHBvaW50O1xuICAvLyBfcmVxdWVzdFdTREwodXJsLCBvcHRpb25zLCBmdW5jdGlvbihlcnIsIHdzZGwpIHtcbiAgLy8gICBjYWxsYmFjayhlcnIsIHdzZGwgJiYgbmV3IENsaWVudCh3c2RsLCBlbmRwb2ludCwgb3B0aW9ucykpO1xuICAvLyB9KTtcblxuICBjb25zdCB3c2RsID0gYXdhaXQgX3JlcXVlc3RXU0RMKHVybCwgb3B0aW9ucyk7XG4gIGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQod3NkbCwgZW5kcG9pbnQsIG9wdGlvbnMpO1xuICByZXR1cm4gY2xpZW50O1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50QXN5bmModXJsLCBvcHRpb25zLCBlbmRwb2ludCk6IE9ic2VydmFibGU8YW55PiB7XG4vLyAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbi8vICAgICBvcHRpb25zID0ge307XG4vLyAgIH1cbi8vICAgY29uc29sZS5sb2coXCJjcmVhdGVDbGllbnRBc3luY1wiLCBvcHRpb25zKVxuLy8gICByZXR1cm4gY3JlYXRlQ2xpZW50KHVybCwgb3B0aW9ucywgZW5kcG9pbnQpO1xuLy8gfVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gbGlzdGVuKHNlcnZlciwgcGF0aE9yT3B0aW9ucywgc2VydmljZXMsIHhtbCkge1xuLy8gICBsZXQgb3B0aW9uczogYW55ID0ge30sXG4vLyAgICAgcGF0aCA9IHBhdGhPck9wdGlvbnMsXG4vLyAgICAgdXJpID0gJyc7XG5cbi8vICAgaWYgKHR5cGVvZiBwYXRoT3JPcHRpb25zID09PSAnb2JqZWN0Jykge1xuLy8gICAgIG9wdGlvbnMgPSBwYXRoT3JPcHRpb25zO1xuLy8gICAgIHBhdGggPSBvcHRpb25zLnBhdGg7XG4vLyAgICAgc2VydmljZXMgPSBvcHRpb25zLnNlcnZpY2VzO1xuLy8gICAgIHhtbCA9IG9wdGlvbnMueG1sO1xuLy8gICAgIHVyaSA9IG9wdGlvbnMudXJpO1xuLy8gICB9XG5cbi8vICAgY29uc3Qgd3NkbCA9IG5ldyBXU0RMKHhtbCB8fCBzZXJ2aWNlcywgdXJpLCBvcHRpb25zKTtcbi8vICAgcmV0dXJuIG5ldyBTZXJ2ZXIoc2VydmVyLCBwYXRoLCBzZXJ2aWNlcywgd3NkbCwgb3B0aW9ucyk7XG4vLyB9XG5cbmV4cG9ydCBjb25zdCBCYXNpY0F1dGhTZWN1cml0eSA9IHNlY3VyaXR5LkJhc2ljQXV0aFNlY3VyaXR5O1xuZXhwb3J0IGNvbnN0IE5UTE1TZWN1cml0eSA9IHNlY3VyaXR5Lk5UTE1TZWN1cml0eTtcbmV4cG9ydCBjb25zdCBXU1NlY3VyaXR5ID0gc2VjdXJpdHkuV1NTZWN1cml0eTtcbmV4cG9ydCBjb25zdCBXU1NlY3VyaXR5Q2VydCA9IHNlY3VyaXR5LldTU2VjdXJpdHlDZXJ0O1xuZXhwb3J0IGNvbnN0IENsaWVudFNTTFNlY3VyaXR5ID0gc2VjdXJpdHkuQ2xpZW50U1NMU2VjdXJpdHk7XG5leHBvcnQgY29uc3QgQ2xpZW50U1NMU2VjdXJpdHlQRlggPSBzZWN1cml0eS5DbGllbnRTU0xTZWN1cml0eVBGWDtcbmV4cG9ydCBjb25zdCBCZWFyZXJTZWN1cml0eSA9IHNlY3VyaXR5LkJlYXJlclNlY3VyaXR5O1xuIl19