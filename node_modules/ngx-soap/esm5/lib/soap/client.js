/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright (c) 2011 Vinay Pulim <vinay@milewise.com>
 * MIT Licensed
 */
import * as assert from 'assert';
import * as events from 'events';
import * as util from 'util';
import { findPrefix } from './utils';
import * as _ from 'lodash';
import uuid4 from 'uuid/v4';
import { map } from 'rxjs/operators';
var /** @type {?} */ nonIdentifierChars = /[^a-z$_0-9]/i;
export var /** @type {?} */ Client = function (wsdl, endpoint, options) {
    events.EventEmitter.call(this);
    options = options || {};
    this.wsdl = wsdl;
    this._initializeOptions(options);
    this._initializeServices(endpoint);
    this.httpClient = /** @type {?} */ (options.httpClient);
    var /** @type {?} */ promiseOptions = { multiArgs: true };
    if (options.overridePromiseSuffix) {
        promiseOptions.suffix = options.overridePromiseSuffix;
    }
    Promise.all([this, promiseOptions]);
};
util.inherits(Client, events.EventEmitter);
Client.prototype.addSoapHeader = function (soapHeader, name, namespace, xmlns) {
    if (!this.soapHeaders) {
        this.soapHeaders = [];
    }
    if (typeof soapHeader === 'object') {
        soapHeader = this.wsdl.objectToXML(soapHeader, name, namespace, xmlns, true);
    }
    return this.soapHeaders.push(soapHeader) - 1;
};
Client.prototype.changeSoapHeader = function (index, soapHeader, name, namespace, xmlns) {
    if (!this.soapHeaders) {
        this.soapHeaders = [];
    }
    if (typeof soapHeader === 'object') {
        soapHeader = this.wsdl.objectToXML(soapHeader, name, namespace, xmlns, true);
    }
    this.soapHeaders[index] = soapHeader;
};
Client.prototype.getSoapHeaders = function () {
    return this.soapHeaders;
};
Client.prototype.clearSoapHeaders = function () {
    this.soapHeaders = null;
};
Client.prototype.addHttpHeader = function (name, value) {
    if (!this.httpHeaders) {
        this.httpHeaders = {};
    }
    this.httpHeaders[name] = value;
};
Client.prototype.getHttpHeaders = function () {
    return this.httpHeaders;
};
Client.prototype.clearHttpHeaders = function () {
    this.httpHeaders = {};
};
Client.prototype.addBodyAttribute = function (bodyAttribute, name, namespace, xmlns) {
    if (!this.bodyAttributes) {
        this.bodyAttributes = [];
    }
    if (typeof bodyAttribute === 'object') {
        var /** @type {?} */ composition_1 = '';
        Object.getOwnPropertyNames(bodyAttribute).forEach(function (prop, idx, array) {
            composition_1 += ' ' + prop + '="' + bodyAttribute[prop] + '"';
        });
        bodyAttribute = composition_1;
    }
    if (bodyAttribute.substr(0, 1) !== ' ')
        bodyAttribute = ' ' + bodyAttribute;
    this.bodyAttributes.push(bodyAttribute);
};
Client.prototype.getBodyAttributes = function () {
    return this.bodyAttributes;
};
Client.prototype.clearBodyAttributes = function () {
    this.bodyAttributes = null;
};
Client.prototype.setEndpoint = function (endpoint) {
    this.endpoint = endpoint;
    this._initializeServices(endpoint);
};
Client.prototype.describe = function () {
    var /** @type {?} */ types = this.wsdl.definitions.types;
    return this.wsdl.describeServices();
};
Client.prototype.setSecurity = function (security) {
    this.security = security;
};
Client.prototype.setSOAPAction = function (SOAPAction) {
    this.SOAPAction = SOAPAction;
};
Client.prototype._initializeServices = function (endpoint) {
    var /** @type {?} */ definitions = this.wsdl.definitions, /** @type {?} */
    services = definitions.services;
    for (var /** @type {?} */ name_1 in services) {
        this[name_1] = this._defineService(services[name_1], endpoint);
    }
};
Client.prototype._initializeOptions = function (options) {
    this.streamAllowed = options.stream;
    this.normalizeNames = options.normalizeNames;
    this.wsdl.options.attributesKey = options.attributesKey || 'attributes';
    this.wsdl.options.envelopeKey = options.envelopeKey || 'soap';
    this.wsdl.options.preserveWhitespace = !!options.preserveWhitespace;
    if (options.ignoredNamespaces !== undefined) {
        if (options.ignoredNamespaces.override !== undefined) {
            if (options.ignoredNamespaces.override === true) {
                if (options.ignoredNamespaces.namespaces !== undefined) {
                    this.wsdl.options.ignoredNamespaces = options.ignoredNamespaces.namespaces;
                }
            }
        }
    }
    if (options.overrideRootElement !== undefined) {
        this.wsdl.options.overrideRootElement = options.overrideRootElement;
    }
    this.wsdl.options.forceSoap12Headers = !!options.forceSoap12Headers;
};
Client.prototype._defineService = function (service, endpoint) {
    var /** @type {?} */ ports = service.ports, /** @type {?} */
    def = {};
    for (var /** @type {?} */ name_2 in ports) {
        def[name_2] = this._definePort(ports[name_2], endpoint ? endpoint : ports[name_2].location);
    }
    return def;
};
Client.prototype._definePort = function (port, endpoint) {
    var /** @type {?} */ location = endpoint, /** @type {?} */
    binding = port.binding, /** @type {?} */
    methods = binding.methods, /** @type {?} */
    def = {};
    for (var /** @type {?} */ name_3 in methods) {
        def[name_3] = this._defineMethod(methods[name_3], location);
        var /** @type {?} */ methodName = this.normalizeNames ? name_3.replace(nonIdentifierChars, '_') : name_3;
        this[methodName] = def[name_3];
    }
    return def;
};
Client.prototype._defineMethod = function (method, location) {
    var /** @type {?} */ self = this;
    var /** @type {?} */ temp = null;
    return function (args, callback, options, extraHeaders) {
        if (typeof args === 'function') {
            callback = args;
            args = {};
        }
        else if (typeof options === 'function') {
            temp = callback;
            callback = options;
            options = temp;
        }
        else if (typeof extraHeaders === 'function') {
            temp = callback;
            callback = extraHeaders;
            extraHeaders = options;
            options = temp;
        }
        // self._invoke(method, args, location, function(error, result, rawResponse, soapHeader, rawRequest) {
        //   callback(error, result, rawResponse, soapHeader, rawRequest);
        // }, options, extraHeaders);
        return self._invoke(method, args, location, options, extraHeaders);
    };
};
Client.prototype._invoke = function (method, args, location, options, extraHeaders) {
    var /** @type {?} */ self = this, /** @type {?} */
    name = method.$name, /** @type {?} */
    input = method.input, /** @type {?} */
    output = method.output, /** @type {?} */
    style = method.style, /** @type {?} */
    defs = this.wsdl.definitions, /** @type {?} */
    envelopeKey = this.wsdl.options.envelopeKey, /** @type {?} */
    ns = defs.$targetNamespace, /** @type {?} */
    encoding = '', /** @type {?} */
    message = '', /** @type {?} */
    xml = null, /** @type {?} */
    req = null, /** @type {?} */
    soapAction = null, /** @type {?} */
    alias = findPrefix(defs.xmlns, ns), /** @type {?} */
    headers = {
        "Content-Type": "text/xml; charset=utf-8"
    }, /** @type {?} */
    xmlnsSoap = "xmlns:" + envelopeKey + "=\"http://schemas.xmlsoap.org/soap/envelope/\"";
    if (this.wsdl.options.forceSoap12Headers) {
        headers["Content-Type"] = "application/soap+xml; charset=utf-8";
        xmlnsSoap = "xmlns:" + envelopeKey + "=\"http://www.w3.org/2003/05/soap-envelope\"";
    }
    if (this.SOAPAction) {
        soapAction = this.SOAPAction;
    }
    else if (method.soapAction !== undefined && method.soapAction !== null) {
        soapAction = method.soapAction;
    }
    else {
        soapAction = ((ns.lastIndexOf("/") !== ns.length - 1) ? ns + "/" : ns) + name;
    }
    if (!this.wsdl.options.forceSoap12Headers) {
        headers.SOAPAction = '"' + soapAction + '"';
    }
    options = options || {};
    //Add extra headers
    for (var /** @type {?} */ header in this.httpHeaders) {
        headers[header] = this.httpHeaders[header];
    }
    for (var /** @type {?} */ attr in extraHeaders) {
        headers[attr] = extraHeaders[attr];
    }
    // Allow the security object to add headers
    if (self.security && self.security.addHeaders)
        self.security.addHeaders(headers);
    if (self.security && self.security.addOptions)
        self.security.addOptions(options);
    if ((style === 'rpc') && ((input.parts || input.name === "element") || args === null)) {
        assert.ok(!style || style === 'rpc', 'invalid message definition for document style binding');
        message = self.wsdl.objectToRpcXML(name, args, alias, ns, (input.name !== "element"));
        (method.inputSoap === 'encoded') && (encoding = 'soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" ');
    }
    else {
        assert.ok(!style || style === 'document', 'invalid message definition for rpc style binding');
        // pass `input.$lookupType` if `input.$type` could not be found
        message = self.wsdl.objectToDocumentXML(input.$name, args, input.targetNSAlias, input.targetNamespace, (input.$type || input.$lookupType));
    }
    xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
        "<" + envelopeKey + ":Envelope " +
        xmlnsSoap + " " +
        "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        encoding +
        this.wsdl.xmlnsInEnvelope + '>' +
        ((self.soapHeaders || self.security) ?
            ("<" + envelopeKey + ":Header>" +
                (self.soapHeaders ? self.soapHeaders.join("\n") : "") +
                (self.security && !self.security.postProcess ? self.security.toXML() : "") +
                "</" + envelopeKey + ":Header>")
            :
                '') +
        "<" + envelopeKey + ":Body" +
        (self.bodyAttributes ? self.bodyAttributes.join(' ') : '') +
        (self.security && self.security.postProcess ? ' Id="_0"' : '') +
        ">" +
        message +
        "</" + envelopeKey + ":Body>" +
        "</" + envelopeKey + ":Envelope>";
    if (self.security && self.security.postProcess) {
        xml = self.security.postProcess(xml, envelopeKey);
    }
    if (options && options.postProcess) {
        xml = options.postProcess(xml);
    }
    self.lastMessage = message;
    self.lastRequest = xml;
    self.lastEndpoint = location;
    var /** @type {?} */ eid = options.exchangeId || uuid4();
    self.emit('message', message, eid);
    self.emit('request', xml, eid);
    var /** @type {?} */ tryJSONparse = function (body) {
        try {
            return JSON.parse(body);
        }
        catch (/** @type {?} */ err) {
            return undefined;
        }
    };
    // if (this.streamAllowed && typeof self.httpClient.requestStream === 'function') {
    //   callback = _.once(callback);
    //   const startTime = Date.now();
    //   req = self.httpClient.requestStream(location, xml, headers, options, self);
    //   self.lastRequestHeaders = req.headers;
    //   const onError = function onError(err) {
    //     self.lastResponse = null;
    //     self.lastResponseHeaders = null;
    //     self.lastElapsedTime = null;
    //     self.emit('response', null, null, eid);
    //     callback(err, undefined, undefined, undefined, xml);
    //   };
    //   req.on('error', onError);
    //   req.on('response', function (response) {
    //     response.on('error', onError);
    //     // When the output element cannot be looked up in the wsdl, play it safe and
    //     // don't stream
    //     if(response.statusCode !== 200 || !output || !output.$lookupTypes) {
    //       console.log("TODO! response handling");
    //       // response.pipe(concatStream({encoding: 'string'}, function (body) {
    //       //   self.lastResponse = body;
    //       //   self.lastResponseHeaders = response && response.headers;
    //       //   self.lastElapsedTime = Date.now() - startTime;
    //       //   self.emit('response', body, response, eid);
    //       //   return parseSync(body, response);
    //       // }));
    //       return;
    //     }
    //     self.wsdl.xmlToObject(response, function (error, obj) {
    //       self.lastResponse = response;
    //       self.lastResponseHeaders = response && response.headers;
    //       self.lastElapsedTime = Date.now() - startTime;
    //       self.emit('response', '<stream>', response, eid);
    //       if (error) {
    //         error.response = response;
    //         error.body = '<stream>';
    //         self.emit('soapError', error, eid);
    //         return callback(error, response, undefined, undefined, xml);
    //       }
    //       return finish(obj, '<stream>', response);
    //     });
    //   });
    //   return;
    // }
    return (/** @type {?} */ (self.httpClient)).post(location, xml, {
        headers: headers,
        responseType: 'text', observe: 'response'
    }).pipe(map(function (response) {
        self.lastResponse = response.body;
        self.lastResponseHeaders = response && response.headers;
        // self.lastElapsedTime = response && response.elapsedTime;
        self.emit('response', response.body, response, eid);
        return parseSync(response.body, response);
    }));
    /**
     * @param {?} body
     * @param {?} response
     * @return {?}
     */
    function parseSync(body, response) {
        var /** @type {?} */ obj;
        try {
            obj = self.wsdl.xmlToObject(body);
        }
        catch (/** @type {?} */ error) {
            //  When the output element cannot be looked up in the wsdl and the body is JSON
            //  instead of sending the error, we pass the body in the response.
            if (!output || !output.$lookupTypes) {
                // debug('Response element is not present. Unable to convert response xml to json.');
                //  If the response is JSON then return it as-is.
                var /** @type {?} */ json = _.isObject(body) ? body : tryJSONparse(body);
                if (json) {
                    return { err: null, response: response, responseBody: json, header: undefined, xml: xml }; //callback(null, response, json, undefined, xml);
                }
            }
            error.response = response;
            error.body = body;
            self.emit('soapError', error, eid);
            throw error; //callback(error, response, body, undefined, xml);
        }
        return finish(obj, body, response);
    }
    /**
     * @param {?} obj
     * @param {?} responseBody
     * @param {?} response
     * @return {?}
     */
    function finish(obj, responseBody, response) {
        var /** @type {?} */ result = null;
        if (!output) {
            // one-way, no output expected
            return { err: null, response: null, responseBody: responseBody, header: obj.Header, xml: xml }; //callback(null, null, body, obj.Header, xml);
        }
        // If it's not HTML and Soap Body is empty
        if (!obj.html && !obj.Body) {
            return { err: null, obj: obj, responseBody: responseBody, header: obj.Header, xml: xml };
            //callback(null, obj, body, obj.Header);
        }
        if (typeof obj.Body !== 'object') {
            var /** @type {?} */ error = new Error('Cannot parse response');
            error.response = response;
            error.body = responseBody;
            return { err: error, obj: obj, responseBody: responseBody, header: undefined, xml: xml };
            //callback(error, obj, body, undefined, xml);
        }
        result = obj.Body[output.$name];
        // RPC/literal response body may contain elements with added suffixes I.E.
        // 'Response', or 'Output', or 'Out'
        // This doesn't necessarily equal the ouput message name. See WSDL 1.1 Section 2.4.5
        if (!result) {
            result = obj.Body[output.$name.replace(/(?:Out(?:put)?|Response)$/, '')];
        }
        if (!result) {
            ['Response', 'Out', 'Output'].forEach(function (term) {
                if (obj.Body.hasOwnProperty(name + term)) {
                    return result = obj.Body[name + term];
                }
            });
        }
        return { err: null, result: result, responseBody: responseBody, header: obj.Header, xml: xml };
        //callback(null, result, body, obj.Header, xml);
    }
    // // Added mostly for testability, but possibly useful for debugging
    // if(req && req.headers && !options.ntlm) //fixes an issue when req or req.headers is undefined, doesn't apply to ntlm requests
    //   self.lastRequestHeaders = req.headers;
};

//# sourceMappingURL=data:application/json;base64,